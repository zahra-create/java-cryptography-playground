package encryption.symetric;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.ShortBufferException;
import javax.crypto.spec.SecretKeySpec;

public class Test {

	public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, ShortBufferException {
		// generate key
		byte[] keybytes = new byte[] {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
				0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x02, 0x03};
		SecretKey key = new SecretKeySpec(keybytes,"AES");
		
		// create cipher object
		Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
		cipher.init(Cipher.ENCRYPT_MODE, key);
		
		byte[] input = new byte[] {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
                0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
                0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01};
		int outputSize = cipher.getOutputSize(input.length);
		
		byte[] cipherInput = new byte[outputSize];
		int dofinalSize = cipher.doFinal(input, 0, input.length, cipherInput);
	
		System.out.println("outputSize : "+outputSize);
		System.out.println("dofinalSize : "+dofinalSize);
		

	}

}
